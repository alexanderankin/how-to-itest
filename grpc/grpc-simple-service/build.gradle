plugins {
    id 'conventions'
    id 'com.google.protobuf' version '0.9.4'
}

def grpcVersion = '1.60.1'
def protobufVersion = '3.25.1'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // https://mvnrepository.com/artifact/no.entur.mapstruct.spi/protobuf-spi-impl
    annotationProcessor 'no.entur.mapstruct.spi:protobuf-spi-impl:1.44'
    implementation 'no.entur.mapstruct.spi:protobuf-spi-impl:1.44'

    // treating to actual models
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // need javax until resolved in: https://github.com/grpc/grpc-java/issues/9179
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation platform('io.grpc:grpc-bom:' + grpcVersion)
    // not needed since grpc-bom specifies protobufVersion it uses internally
    // implementation platform('com.google.protobuf:protobuf-bom:' + protobufVersion)

    implementation 'io.grpc:grpc-services'
    // not needed as grpc-services depends on it
    // implementation 'io.grpc:grpc-protobuf'
    /*
        Caused by: io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional
        channel service provider found. Try adding a dependency on the grpc-okhttp,
        grpc-netty, or grpc-netty-shaded artifact
     */
    implementation 'io.grpc:grpc-netty'

    // https://github.com/grpc/grpc-java/blob/master/examples/build.gradle
    // https://github.com/grpc/grpc-java/blob/0f21574bb1bc7222a0c5018236bfcd9289191f6d/examples/build.gradle
    // testImplementation "io.grpc:grpc-testing"
    // testImplementation "io.grpc:grpc-inprocess"
}

protobuf {
    protoc {
        // https://mvnrepository.com/artifact/com.google.protobuf/protoc
        artifact = 'com.google.protobuf:protoc:' + protobufVersion
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:' + grpcVersion
        }
    }
    generateProtoTasks {
        all().each {
            it.plugins {
                grpc {
                    option('jakartaGenerated')
                }
            }
        }
    }
}
